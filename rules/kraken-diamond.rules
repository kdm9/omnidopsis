rule kraken_unclassified:
    input:
        reads="data/reads/samples/{sample}.fastq.gz",
        hash=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/hash.k2d",
        opts=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/opts.k2d",
        taxo=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/taxo.k2d",
    output:
        fastq_un="data/kraken-diamond/kraken/{krakendb}~{krakenfilter}/{sample}_unclassified.fastq.gz",
        fastq_cl="data/kraken-diamond/kraken/{krakendb}~{krakenfilter}/{sample}_classified.fastq.gz",
        report="data/kraken-diamond/kraken/{krakendb}~{krakenfilter}/{sample}_report.txt",
    log: "data/log/kraken_unclassified/{krakendb}~{krakenfilter}/{sample}.log"
    threads: 8
    resources: **acanthophis.rule_resources(config, "kraken_unclassified", time_min=90, mem_gb=16)
    shell:
        "kraken2"
        "   --db $(dirname {input.hash})/"
        "   --threads {threads}"
        "   --use-names"
        "   --report-minimizer-data"
        "   --report {output.report}"
        "   --classified-out {output.fastq_cl}"
        "   --unclassified-out {output.fastq_un}"
        "   --output -"
        "   {input.reads}"
        "   >{log} 2>&1"


rule diamond_unclass:
    input:
        fastq_un="data/kraken-diamond/kraken/{krakendb}~{krakenfilter}/{sample}_unclassified.fastq.gz",
        diamonddb=lambda wc: config["diamond"]["dbs"][wc.db]
    output:
        daa="data/kraken-diamond/diamond/{krakendb}~{krakenfilter}/{db}~{sample}.daa",
    log: "data/log/kraken_unclassified/{krakendb}~{krakenfilter}/{db}~{sample}.log"
    threads: 64
    resources: **acanthophis.rule_resources(config, "diamond_unclass", time_min=120, mem_gb=32)
    shell:
        "diamond"
        "   --sensitive"
