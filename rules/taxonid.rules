
rule kraken_unclassified:
    input:
        reads="data/reads/samples/{sample}.fastq.gz",
        hash=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/hash.k2d",
        opts=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/opts.k2d",
        taxo=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/taxo.k2d",
    output:
        fastq_un="data/taxonid/{sampleset}/kraken/{krakendb}/{sample}_unclassified.fastq.gz",
        fastq_cl="data/taxonid/{sampleset}/kraken/{krakendb}/{sample}_classified.fastq.gz",
        report="data/taxonid/{sampleset}/kraken/{krakendb}/{sample}_report.txt",
    log: "data/taxonid/{sampleset}/kraken/{krakendb}/{sample}.log",
    #threads: acanthophis.threads("kraken_unclassified", 8)
    threads: 8
    resources: **acanthophis.rule_resources(config, "kraken_unclassified", time_min=90, mem_gb=32)
    shell:
        "kraken2"
        "   --db $(dirname {input.hash})"
        "   --memory-mapping"
        "   --threads {threads}"
        "   --use-names"
        "   --report-minimizer-data"
        "   --report {output.report}"
        "   --classified-out {output.fastq_cl}"
        "   --unclassified-out {output.fastq_un}"
        "   --output -"
        "   {input.reads}"
        "   >{log} 2>&1"


rule diamond_unclass:
    input:
        fastq_un="data/taxonid/{sampleset}/kraken/{krakendb}/{sample}_unclassified.fastq.gz",
        diamonddb=lambda wc: config["diamond"]["dbs"][wc.diamonddb],
    output:
        daa="data/taxonid/{sampleset}/diamond/{krakendb}/{diamonddb}~{sample}.daa",
    log: "data/taxonid/{sampleset}/diamond/{krakendb}/{diamonddb}~{sample}.log",
    threads: 128
    resources: **acanthophis.rule_resources(config, "diamond_unclass", time_min=120, mem_gb=32)
    params:
        sensitivity=lambda wc: config["taxonid"]["samplesets"][wc.sampleset]["diamond"]["sensitivity"],
        blocksize=lambda wc: config["taxonid"]["samplesets"][wc.sampleset]["diamond"]["blocksize"],
    shell:
        "diamond blastx"
        "   --tmpdir $TMPDIR"
        "   --threads {threads}"
        "   --db {input.diamonddb}"
        "   --out {output.daa}"
        "   --outfmt 100" # DAA format
        "   --block-size {params.blocksize}"
        "   --query {input.fastq_un}"
        "   {params.sensitivity}"
        "   >{log} 2>&1"
